"use client";
import { useState, Dispatch, SetStateAction } from "react";
import CodeMirror from "@uiw/react-codemirror";
import { json } from "@codemirror/lang-json";
import { EditorView } from "@codemirror/view";
import { autocompletion } from "@codemirror/autocomplete";
import { vscodeLight } from "@uiw/codemirror-theme-vscode";
import Link from "next/link";
import Image from "next/image";

import { upperCamelCase } from "@/Utils/upperCamelCase";

//Components
import Select from "../UI/Select";

//Interface
interface Props {
    setTypes: Dispatch<SetStateAction<string[]>>;
}

const Editor = ({ setTypes }: Props) => {
    const [jsonInput, setJsonInput] = useState<string>("");
    const [name, setName] = useState<string>("AutoGenerated");
    const [type, setType] = useState<string>("yes");

    const handleChange = (value: any) => {
        setJsonInput(value);
    };

    //Handler
    const onReset = () => {
        setJsonInput("");
        setTypes([]);
    }

    //Handler
    const onGenerate = () => {
        try {
            const jsonObj = JSON.parse(jsonInput);
            const { interfaceTypes } = generateTypescriptInterface(jsonObj, name);
            setTypes(interfaceTypes);
        } catch (error) {
            alert("The json provided has syntax errors!");
        }
    }

    //Handler Helper
    const generateTypescriptInterface = (jsonObj: any, className: string): { interfaceTypes: string[] } => {
        if (Array.isArray(jsonObj) && jsonObj.length > 0) {
            jsonObj = jsonObj[0];
        }

        const fields: string[] = [];
        const nestedInterfaces: string[] = [];

        const processField = (key: string, value: any) => {
            const formattedKey = formatKey(key);
            const valueType = typeof value;

            if (Array.isArray(value) && value.length > 0) {
                const nestedClassName = `${upperCamelCase(formattedKey)}`;
                const nestedInterface = generateTypescriptInterface(value[0], nestedClassName);
                nestedInterfaces.push(...nestedInterface.interfaceTypes);
                fields.push(`${formattedKey}?: ${nestedClassName}[];`);
            } else if (valueType === 'object' && value !== null) {
                const nestedClassName = `${upperCamelCase(formattedKey)}`;
                const nestedInterface = generateTypescriptInterface(value, nestedClassName);
                nestedInterfaces.push(...nestedInterface.interfaceTypes);
                fields.push(`${formattedKey}?: ${nestedClassName};`);
            } else {
                let fieldType = '';
                if (valueType === 'number') {
                    fieldType = 'number';
                } else if (valueType === 'string') {
                    fieldType = 'string';
                } else if (valueType === 'boolean') {
                    fieldType = 'boolean';
                } else {
                    fieldType = 'any';
                }
                fields.push(`${formattedKey}?: ${fieldType};`);
            }
        };

        for (const key in jsonObj) {
            processField(key, jsonObj[key]);
        }

        const interfaceDeclaration = `${type === "yes" ? "export " : ""}interface ${upperCamelCase(className)} {\n  ${fields.join('\n  ')}\n}`;

        return { interfaceTypes: [interfaceDeclaration, ...nestedInterfaces] };
    };

    const formatKey = (key: string) => {
        const regex = /[^a-zA-Z]/;
        if (regex.test(key)) {
            return `"${key}"`;
        }
        return key;
    };

    return (
        <div className="col-span-5 lg:col-span-5 xxs:col-span-12">
            <h4 className="text-xl font-semibold text-gray-700 mb-2">JSON</h4>
            <div className="border border-solid border-gray-200 rounded-sm overflow-hidden">
                <CodeMirror
                    value={jsonInput}
                    height="450px"
                    extensions={[
                        json(),
                        autocompletion(),
                        EditorView.lineWrapping
                    ]}
                    onChange={handleChange}
                    placeholder="Enter JSON here..."
                    theme={vscodeLight}
                    style={{ borderRadius: "10px" }}
                />
            </div>
            <input
                className="w-full mt-5 py-3 px-4 focus:outline-none border border-solid border-gray-200 rounded-sm"
                placeholder="Your interface name"
                onChange={(e) => setName(e.target.value)}
            />
            <h4 className="text-base text-gray-600 my-2">If you don&apos;t want to add &quot;export&quot; keyword, select &quot;no&quot;</h4>
            <Select
                id="selectType"
                value={type}
                onChange={(e) => setType(e)}
                placeholder="Select number type"
                options={[
                    { value: "yes", label: "Yes" },
                    { value: "no", label: "No" }
                ]}
            />

            <div className="grid grid-cols-2 gap-5 mt-4">
                <button className="bg-gray-700 text-white px-8 py-3 flex-1 rounded-sm" onClick={onReset}>Clear JSON</button>
                <button className="bg-main text-white py-3 rounded-sm" onClick={onGenerate}>
                    Generate Types
                </button>
            </div>
            <div className="mt-32 text-center">
                <Image src="/logo.png" alt="Logo" width={502} height={133.93} className="w-[180px] mx-auto" />
                <div className="w-full mx-auto h-[6px] bg-main mt-6 rounded-sm my-4" />
                <h4 className="text-xl font-semibold text-gray-700">Created By Siam Ahnaf</h4>
                <Link href="https://www.siamahnaf.com/" target="_blank" className="text-[15px] text-main hover:underline">
                    www.siamahnaf.com
                </Link>
            </div>
        </div>
    );
};

export default Editor;
